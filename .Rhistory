source('D:/Documentos/Personal/Licenciatura/Actuaría/Desarrollo de software actuarial 3/Software_Actuarial_III/Práctica de clase m210218.R')
print(hola)
print(x)
x
#Impresión de un arreglo
x <- 1:20
z
z<- 99:43
#El operador ":" me permite generar secuencias numéricas
w <- 14.5
#El operador ":" me permite generar secuencias numéricas
w <- 3:14.5
#El operador muestra sólo números enteros
w<_3
#El operador muestra sólo números enteros
w _ 3
#El operador muestra sólo números enteros
w
#Impresión de un arreglo
x <- 1:20
x
y <- 3:9
y
z<- 99:43
z
#El operador ":" me permite generar secuencias numéricas
w <- 3:14.5
#El operador muestra sólo números enteros
w
w <- 3:14.5
#El operador muestra sólo números enteros
w
#Impresión de un arreglo
x <- 1:20
x
y <- 3:9
y
z<- 99:43
z
#El operador ":" me permite generar secuencias numéricas
w <- 3:14.5
#El operador muestra sólo números enteros
w
#Impresión de un arreglo
x <- 1:20
x
y <- 3:9
y
z<- 99:43
z
#El operador ":" me permite generar secuencias numéricas
w <- 3:14.5
#El operador muestra sólo números enteros
w
#Impresión de un arreglo
x <- 1:20
x
y <- 3:9
y
z<- 99:43
z
#El operador ":" me permite generar secuencias numéricas
w <- 3:14.5
#El operador muestra sólo números enteros
w
x
z <- 1+i
#El operador muestra sólo números enteros
w <- (3,2)
#El operador muestra sólo números enteros
vector()
#El operador muestra sólo números enteros
vector(1)
#El operador muestra sólo números enteros
vector() <- "Hola"
#El operador muestra sólo números enteros
a <- 15.6
#El operador muestra sólo números enteros
a <- 15.6l
#El operador muestra sólo números enteros
a <- 15.6 l
#El operador muestra sólo números enteros
a <-l 15.6
#El operador muestra sólo números enteros
a <- 15.6l
#El operador muestra sólo números enteros
a <- 15.6 l
a
#Inf infinito
exp(-Inf)
inf-inf
inf - inf
Inf-Inf
Inf+Inf
x<-1l
x <- 1l
x
NaN
NaN <- 1
NaN
NaN
x <- 1 l
x <- 1L
x <- 1.5L
x <- 1.5 L
attributes(x)
attributes(w)
x<-1
x
x<-
1
#R nos permite trabajar con conceptos matemáticos "superiores como los números complejos
#Es posible crear un vector con la función c()
x<-c(TRUE,FALSE,TRUE,TRUE,f,f,t)
#R nos permite trabajar con conceptos matemáticos "superiores como los números complejos
#Es posible crear un vector con la función c()
x<-c(TRUE,FALSE,TRUE,TRUE,F,F,T)
x
x<-c(1L,3L,5L,-4L)
x<-c(1+1i,3+4i,5-6i)#complejo
for (each in x) {
}
x+x
w=x+(x-1)
w
w
w=x+w
for (each in x) {
w=x+w
}
w
#Vectores vacíos
b<-vector("numeric",length = 10)
b
b(1)
c(T,2L)
c(T,1L,2) #Numeric
c(1+1i,TRUE,2)
#Cuersion forzosa
as.numeric(w)
as.character(w)
#Impresión de un arreglo
x <- 1:20
y <- 3:9
z<- 99:43
#El operador ":" me permite generar secuencias numéricas
w <- 3:14.5
#El operador muestra sólo números enteros
a <- 15.6
#R nos permite trabajar con conceptos matemáticos "superiores como los números complejos
#Es posible crear un vector con la función c()
#Clases de vectores
x<-c(TRUE,FALSE,TRUE,TRUE,F,F,T) #logical
x<-c(1L,3L,5L,-4L)#Integer
x<-c(1,3,5,-4)#Numeric
x<-c(1+1i,3+4i,5-6i)#complejo
#Inf es infinito
exp(-Inf)
#Vectores vacíos
b<-vector("numeric",length = 10)
#Jerarquía de clases (cuersión)
c(T,1L,2) #Numeric
#Cuersion forzosa
as.numeric(w)
as.character(w)
c(1+1i,TRUE,2) #Complex
#Coerción forzada
as.numeric(w)
as.character(w)
as.numeric(c)
#Asignación de variables
c<-"Hola"
as.numeric(c)
#Asignación de variables
c<-"Hola"
x <- 1:20
y <- 3:9
z<- 99:43
a <- 15.6
#El operador ":" me permite generar secuencias numéricas que sólo son números enteros
w <- 3:14.5
#Inf es infinito
exp(-Inf)
#R nos permite trabajar con conceptos matemáticos "superiores" como los números complejos
#Es posible crear un vector con la función c()
#Clases de vectores
x<-c(TRUE,FALSE,TRUE,TRUE,F,F,T) #logical
x<-c(1,3,5,-4)#Numeric
x<-c(1+1i,3+4i,5-6i)#complejo
#Vectores vacíos
b<-vector("numeric",length = 10)
c(1+1i,TRUE,2) #Complex
#Jerarquía de clases (coerción)
c(T,1L,2) #Numeric
x<-c(1L,3L,5L,-4L)#Integer
#Coerción forzada
as.numeric(w)
as.character(w)
as.numeric(c) #No es posible realizar la coerción
help()
hlep
help("numeric")
help(boolean)
help(bolean)
help("logical")
logical(length = 2)
x<-list(1,"a",1+4i,t)
#Para crear una lista de objetos, se usa la función list
x<-list(1,"a",1+4i,t)
x
x
#Para crear una lista de objetos, se usa la función list
x<-list(1,"a",1+4i,T)
x
#Para crear una lista de objetos, se usa la función list
#En una lista se conservan las clases de sus elementos
x<-list(1,"a",1+4i,T,1:5)
x
x<-matrix(nrow = 2,ncol = 3)
x
as.integer(x)
#Para crear una lista de objetos, se usa la función list
#En una lista se conservan las clases de sus elementos
x<-list(1,"a",1+4i,T,1:5)
m<-matrix(nrow = 2,ncol = 3)
?matrix
m<-matrix(c(1,2,3),nrow = 2,ncol = 3)
m
dim(x)
dim(m)
attributes(m)
attributes(x)
attributes(m)
m<-matrix(c(1,2,3,1+2i,T),nrow = 2,ncol = 3)
m<-matrix(c(1,2,3,1+2i,T),nrow = 2,ncol = 3)
m<-matrix(c(1,2,3,1+2i,T,8),nrow = 2,ncol = 3)
m
m<-matrix(c(1,2,3,1+2i,T,8),2,3)
m
for (1 in m) {
}
m<-matrix(c(1,2,3,1+2i,T,8),2,3,T)
m
1:6
m<-matrix(1:6,2,3,T)
m
r<-1:20
dim(r)
dim(r)<-c(2,5)
dim(r)<-c(4,5)
r
x<-1:3
y<-10:12
cbind(x,y)
rbind(x,y)
x<-1:3
> y<-10:12
> cbind(x,y)
rbind(x,y)
x<-factor(c("si","si","no","no"))
x
table(x)
unclass(x)
?factor
?unclass
?frame
?`data.frame
?data.frame
x<-data.frame(foo=1:4,bar=c(T,T,F,F))
x
nrow(x)
ncol(x)
x<-1:3
names(x)<-c("foo","bar","norf")
x
#Lectura y escritura de datos
#1.-Creo el objeto
y<-data.frame(a=1,b=a)
#2.-Estudio la manera en la que se guardará
dput(y)
#Lectura y escritura de datos
#1.-Creo el objeto
y<-data.frame(a=1,b="a")
#2.-Estudio la manera en la que se guardará
dput(y)
#3.-Lo guardo en mi disco duro
dput(y,file = ~y.r)
#3.-Lo guardo en mi disco duro
dput(y,file = ~/y.R)
#3.-Lo guardo en mi disco duro
dput(y,file = "~/y.R")
y<-data.frame(a=1,b="a")
dput(y)
dput(y,file = "base.R")
#3.-Lo guardo en mi disco duro
dput(y,file = "/d/Documentos/Personal/Licenciatura/Actuaría/Desarrollo de software ac
tuarial 3/Software_Actuarial_III")
#3.-Lo guardo en mi disco duro
dput(y,file = "~/d/Documentos/Personal/Licenciatura/Actuaría/Desarrollo de software ac
tuarial 3/Software_Actuarial_III")
#3.-Lo guardo en mi disco duro
dput(y,file = "~/d/Documentos/Personal/Licenciatura/Actuaría/Desarrollo de software actuarial 3/Software_Actuarial_III")
#3.-Lo guardo en mi disco duro
dput(y,file = "/d/Documentos/Personal/Licenciatura/Actuaría/Desarrollo de software actuarial 3/Software_Actuarial_III")
#3.-Lo guardo en mi disco duro
dput(y,file = "d:Documentos/Personal/Licenciatura/Actuaría/Desarrollo de software actuarial 3/Software_Actuarial_III")
#3.-Lo guardo en mi disco duro
dput(y,file = "D:/Documentos/Personal/Licenciatura/Actuaría/Desarrollo de software actuarial 3/Software_Actuarial_III")
y2 <- dget(file="~/GitHub/SoftwareActuarial3/y.R")
y2 <- dget(file="~/y.R")
setwd("D:/Documentos/Personal/Licenciatura/Actuaría/Desarrollo de software actuarial 3/Software_Actuarial_III")
#3.-Lo guardo en mi disco duro
dput(y,file = "/y.R"
#3.-Lo guardo en mi disco duro
dput(y,file = "/y.R")
#3.-Lo guardo en mi disco duro
dput(y,file = "~/y.R")
setwd("D:/Documentos/Personal/Licenciatura/Actuaría/Desarrollo de software actuarial 3/Software_Actuarial_III")
#3.-Lo guardo en mi disco duro
dput(y,file = "~/y.R")
# 4. Genero un nuevo objeto a partir de la info guardada
y2 <- dget(file="~/y.R")
